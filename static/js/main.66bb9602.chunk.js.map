{"version":3,"sources":["api/posts.js","api/api.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getPostComments","postId","comments","filter","comment","PostsList","selectedUserId","onSelectPost","selectedPostId","isPostDetailsOpen","useState","posts","setPosts","useEffect","userId","post","className","map","id","title","key","type","onClick","defaultProps","NewCommentForm","onAddComment","name","email","body","setComment","method","onSubmit","event","preventDefault","value","onChange","target","placeholder","required","PostDetails","React","memo","postDetails","setPostDetails","postComments","setPostComments","commentsVisible","setCommentsVisible","Promise","all","details","catch","error","console","warn","handleDeleteComment","commentId","length","Object","values","some","entry","JSON","stringify","createComment","App","users","setUsers","setSelectedPostId","setSelectedUserId","setIsPostDetailsOpen","e","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.66bb9602.chunk.js","sourcesContent":["import { BASE_URL } from './api';\n\nconst request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const getUsers = () => request('/users');\n\nexport const getPosts = () => request('/posts');\n\nexport const getUserPosts = userId => (\n  request('/posts')\n    .then(posts => posts.filter(post => post.userId === userId))\n);\n\nexport const getPostDetails = postId => request(`/posts/${postId}`);\n\nexport const getPostComments = postId => (\n  request(`/comments`)\n    .then(comments => comments.filter(comment => comment.postId === postId))\n);\n\nexport const deleteComment = commentId => (\n  request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  })\n);\n\nexport const createComment = data => (\n  request('/comments', {\n    method: 'POST',\n    body: JSON.stringify(data),\n  })\n);\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPosts, getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\nconst unknownUserId = 0;\n\nexport const PostsList = ({\n  selectedUserId, onSelectPost, selectedPostId,\n  isPostDetailsOpen,\n}) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    if (selectedUserId === unknownUserId) {\n      getPosts()\n        .then(setPosts);\n    } else {\n      getUserPosts(selectedUserId)\n        .then(setPosts);\n    }\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <>\n        <h2>Posts:</h2>\n        <ul className=\"PostsList__list\">\n          {posts.map(({ id, userId, title }) => (\n            <li\n              key={id}\n              className=\"PostsList__item\"\n            >\n              <div>\n                <b>{`[User #${userId}]: `}</b>\n                {title}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => onSelectPost(id)}\n              >\n                {id === selectedPostId && isPostDetailsOpen\n                  ? 'Close' : 'Open'}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUserId: PropTypes.number,\n  selectedPostId: PropTypes.number,\n  onSelectPost: PropTypes.func.isRequired,\n  isPostDetailsOpen: PropTypes.bool,\n};\n\nPostsList.defaultProps = {\n  selectedUserId: 0,\n  selectedPostId: 0,\n  isPostDetailsOpen: false,\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = ({ selectedPostId, onAddComment }) => {\n  const [comment, setComment] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    setComment({\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  return (\n    <form\n      method=\"POST\"\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={comment.name}\n          onChange={event => setComment({\n            ...comment,\n            name: event.target.value,\n          })}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={comment.email}\n          onChange={event => setComment({\n            ...comment,\n            email: event.target.value,\n          })}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={comment.body}\n          onChange={event => setComment({\n            ...comment,\n            body: event.target.value,\n          })}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={() => onAddComment({\n          postId: selectedPostId,\n          ...comment,\n        })}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  selectedPostId: PropTypes.number,\n  onAddComment: PropTypes.func.isRequired,\n};\n\nNewCommentForm.defaultProps = {\n  selectedPostId: 0,\n};\n","import React, { useState, useEffect } from 'react';\nimport './PostDetails.scss';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport {\n  getPostDetails,\n  getPostComments,\n  deleteComment,\n  createComment,\n} from '../../api/posts';\n\nexport const PostDetails = React.memo(({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState(null);\n  const [postComments, setPostComments] = useState(null);\n  const [commentsVisible, setCommentsVisible] = useState(true);\n\n  useEffect(() => {\n    Promise.all([\n      getPostDetails(selectedPostId),\n      getPostComments(selectedPostId),\n    ])\n      .then(([details, comments]) => {\n        setPostDetails(details);\n        setPostComments(comments);\n        setCommentsVisible(true);\n      })\n      // eslint-disable-next-line no-console\n      .catch(error => console.warn(error));\n  }, [selectedPostId]);\n\n  const handleDeleteComment = (id) => {\n    deleteComment(id)\n      .then(() => getPostComments(selectedPostId))\n      .then(setPostComments);\n  };\n\n  const handleCreateComment = (data) => {\n    if (Object.values(data).some(entry => entry.length === 0)) {\n      return;\n    }\n\n    createComment(data)\n      .then(() => getPostComments(selectedPostId))\n      .then(setPostComments);\n  };\n\n  return (\n    <>\n      {postDetails !== null && (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{postDetails.body}</p>\n          </section>\n\n          {postComments !== null && (\n            <section className=\"PostDetails__comments\">\n              {postComments.length > 0 && (\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => setCommentsVisible(!commentsVisible)}\n                >\n                  {`${commentsVisible ? 'Hide' : 'Show'} `}\n                  {`${postComments.length} comments`}\n                </button>\n              )}\n\n              {commentsVisible && (\n                <ul className=\"PostDetails__list\">\n                  {postComments.map(({ id, body }) => (\n                    <li\n                      key={id}\n                      className=\"PostDetails__list-item\"\n                    >\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => handleDeleteComment(id)}\n                      >\n                        X\n                      </button>\n                      <p>{body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </section>\n          )}\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                selectedPostId={selectedPostId}\n                onAddComment={handleCreateComment}\n              />\n            </div>\n          </section>\n        </div>\n      )}\n    </>\n  );\n});\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number,\n};\n\nPostDetails.defaultProps = {\n  selectedPostId: 0,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/posts';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [isPostDetailsOpen, setIsPostDetailsOpen] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  const handleSelectPost = (id) => {\n    if (id !== selectedPostId) {\n      setSelectedPostId(id);\n      setIsPostDetailsOpen(true);\n    } else {\n      setIsPostDetailsOpen(!isPostDetailsOpen);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            name=\"selectedUser\"\n            value={selectedUserId}\n            onChange={e => setSelectedUserId(+e.target.value)}\n            className=\"App__user-selector\"\n          >\n            <option key=\"All Users\" value=\"0\">All Users</option>\n            {users.map(({ id, name }) => (\n              <option key={id} value={id}>{name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            onSelectPost={handleSelectPost}\n            isPostDetailsOpen={isPostDetailsOpen}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {isPostDetailsOpen === true ? (\n            <PostDetails selectedPostId={selectedPostId} />\n          ) : (\n            <h2>\n              No posts opened\n            </h2>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}