{"version":3,"sources":["api/api.js","components/PostsList/PostsList.jsx","api/posts.js","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","components/Loader/Loader.jsx","App.jsx","api/users.js","index.js"],"names":["request","url","options","fetch","then","response","ok","json","Error","status","PostsList","setUserPosts","userPosts","selectedUserId","onChangePostId","selectedPostId","useEffect","userId","result","className","map","id","title","key","type","onClick","defaultProps","getPostComments","postId","createComment","name","email","body","data","method","headers","JSON","stringify","NewCommentForm","postComments","setPostComments","useState","setName","setEmail","setBody","onSubmit","event","preventDefault","Math","random","placeholder","value","onChange","target","required","PostDetails","postDetails","setPostDetails","hiddenComments","setHiddenComments","length","comment","commentId","Loader","App","setSelectedUserId","setSelectedPostId","usersFromServer","setUsersFromServer","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebf51c59.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url, options) => (\n  fetch(`${BASE_URL}/${url}`, options)\n    .then((response) => {\n      if (!response.ok) {\n        return new Error(`Error - ${response.status}`);\n      }\n\n      return response.json();\n    })\n);\n","import React, { useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport './PostsList.scss';\n\nimport { getUsersPosts } from '../../api/posts';\n\nexport const PostsList = (\n  { setUserPosts,\n    userPosts,\n    selectedUserId,\n    onChangePostId,\n    selectedPostId },\n) => {\n  useEffect(() => {\n    getUsersPosts(selectedUserId)\n      .then(result => setUserPosts(result));\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {userPosts.map(({ id, userId, title }) => (\n          <li\n            key={id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              {/* eslint-disable-next-line */}\n              <b>[User #{userId}]: </b>\n              {title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                onChangePostId(id);\n              }}\n            >\n              {(selectedPostId === id)\n                ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUserId: propTypes.number.isRequired,\n  setUserPosts: propTypes.func.isRequired,\n  userPosts: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.number.isRequired,\n      userId: propTypes.number.isRequired,\n      title: propTypes.string.isRequired,\n    }).isRequired,\n  ),\n  onChangePostId: propTypes.func.isRequired,\n  selectedPostId: propTypes.number.isRequired,\n};\n\nPostsList.defaultProps = {\n  userPosts: [],\n};\n","\nimport { request } from './api';\n\nexport const getUsersPosts = userId => (\n  request(`posts?userId=${userId}`)\n);\n\nexport const getPostDetails = postId => (\n  request(`posts/${postId}`)\n);\n","import { request } from './api';\n\nexport const getPostComments = postId => (\n  request(`comments?postId=${postId}`)\n);\n\nexport const removeComment = commentId => (\n  request(`comments/${commentId}`, { method: 'DELETE' })\n);\n\nconst post = (url, data) => (\n  request(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify(data),\n  })\n);\n\nexport const createComment = (postId, name, email, body) => (\n  post('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  })\n);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { createComment, getPostComments } from '../../api/comments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, postComments, setPostComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const clearState = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        createComment(postId, name, email, body);\n        setPostComments([...postComments, {\n          name, email, body, id: Math.random(),\n        }]);\n        clearState();\n        getPostComments(postId);\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: propTypes.number.isRequired,\n  postComments: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.number.isRequired,\n      name: propTypes.string.isRequired,\n      body: propTypes.string.isRequired,\n      email: propTypes.string.isRequired,\n    }),\n  ).isRequired,\n  setPostComments: propTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, removeComment } from '../../api/comments';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState('');\n  const [postComments, setPostComments] = useState([]);\n  const [hiddenComments, setHiddenComments] = useState(false);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then((result) => {\n        setPostDetails(result);\n      });\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    getPostComments(selectedPostId)\n      .then((result) => {\n        setPostComments(result);\n      });\n  }, [selectedPostId]);\n\n  const handleComments = () => (\n    setHiddenComments(!hiddenComments)\n  );\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {postComments.length === 0 ? (\n          'No comments'\n        ) : (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={handleComments}\n          >\n            {hiddenComments ? 'Show ' : 'Hide '}\n            {postComments.length}\n            {postComments.length === 1 ? ' comment' : ' comments'}\n          </button>\n        )}\n\n        <ul className=\"PostDetails__list\">\n          {!hiddenComments && (\n            postComments.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    removeComment(comment.id);\n                    // как запустить перерендер после удаления??\n                    getPostComments(selectedPostId)\n                      .then((result) => {\n                        setPostComments(result);\n                      });\n                  }}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))\n          )}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            postComments={postComments}\n            setPostComments={setPostComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: propTypes.number.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable */\nimport React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Loader } from './components/Loader';\n\nimport { getUsers } from './api/users';\n\nconst App = () => {\n  const [userPosts, setUserPosts] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [usersFromServer, setUsersFromServer] = useState(null);\n\n  // const loadUsers = async () => {\n  //   return await getUsers();\n  // }\n\n  useEffect(() => {\n    getUsers()\n      .then(result => {\n        setUsersFromServer(result)\n    })\n  }, [])\n\n  const changeValue = (event) => {\n    setSelectedUserId(event.target.value);\n  };\n\n  const changePostId = (postId) => {\n    setSelectedPostId(postId)\n  }\n\n  return (\n    <div className=\"App\">\n\n      {!usersFromServer ? (\n        <div className=\"App__sidebar\">\n          <Loader />\n        </div>\n      ) : (\n        <>\n          <header className=\"App__header\">\n            <label>\n              Select a user: &nbsp;\n\n              <select\n                className=\"App__user-selector\"\n                value={selectedUserId}\n                onChange={changeValue}\n              >\n                    {/* <option value=\"0\">All users</option>\n                <option value=\"1\">Leanne Graham</option>\n                <option value=\"2\">Ervin Howell</option>\n                <option value=\"3\">Clementine Bauch</option>\n                <option value=\"4\">Patricia Lebsack</option>\n                <option value=\"5\">Chelsey Dietrich</option>\n                <option value=\"6\">Mrs. Dennis Schulist</option>\n                <option value=\"7\">Kurtis Weissnat</option>\n                <option value=\"8\">Nicholas Runolfsdottir V</option>\n                <option value=\"9\">Glenna Reichert</option>\n                <option value=\"10\">Leanne Graham</option> */}\n\n                <option value=\"0\">All users</option>\n                {usersFromServer.map(user => (\n                  <option key={user.id} value={user.id}>\n                    {user.name}\n                  </option>\n                ))}\n              </select>\n            </label>\n          </header>\n\n          <main className=\"App__main\">\n              <div className=\"App__sidebar\">\n                <PostsList\n                  setUserPosts={setUserPosts}\n                  userPosts={userPosts}\n                  selectedUserId={+selectedUserId}\n                  onChangePostId={changePostId}\n                  selectedPostId={selectedPostId}\n                />\n              </div>\n\n              <div className=\"App__content\">\n                {selectedPostId === 0 ? (\n                  <div className=\"PostDetails\">\n                    <h2>No posts selected:</h2>\n                  </div>\n                ) : (\n                  <PostDetails\n                    selectedPostId={selectedPostId}\n                  />\n                )}\n              </div>\n          </main>\n        </>\n      )}\n      \n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = () => (\n  request('/users')\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}